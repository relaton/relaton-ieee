---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%22528%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 18 Sep 2020 07:57:55 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      Content-Length:
      - '901'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd353328a3b6ea58cfd817d1e88fd7b39721a665c94f779cd9008857d665db59e6e371f45be12eb493b93b9d33b3e1998d3b8ae0aeb5245f74d2a4f66fd658cd9513536d2d943ec3b8ef17a76d4c695bd3;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJzdGF0dXMiOiJzdWNjZXNzIiwiY29kZSI6MjAwLCJtZXNzYWdlIjoie1wicmVzcG9uc2VcIjp7XCJGYWNldHNcIjpbe1wiZmFjZXRJZFwiOjEsXCJmYWNldE5hbWVcIjpcImNvbnRlbnRUeXBlXCIsXCJtdWx0aXNlbGVjdFwiOnRydWUsXCJmYWNldHNcIjpbe1wiZmFjZXRWYWx1ZU5hbWVcIjpcIlByb2R1Y3RzXCIsXCJmYWNldFZhbHVlSWRcIjo0Mjk0OTY3MjU0LFwic2VsZWN0ZWRcIjpmYWxzZX0se1wiZmFjZXRWYWx1ZU5hbWVcIjpcIlByb2plY3RcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNTAsXCJzZWxlY3RlZFwiOmZhbHNlfSx7XCJmYWNldFZhbHVlTmFtZVwiOlwiU3RhbmRhcmRcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNDUsXCJzZWxlY3RlZFwiOmZhbHNlfV0sXCJzb3J0T3JkZXJcIjoxfSx7XCJmYWNldElkXCI6MyxcImZhY2V0TmFtZVwiOlwic3RhbmRhcmRUb3BpY3NcIixcIm11bHRpc2VsZWN0XCI6dHJ1ZSxcImZhY2V0c1wiOlt7XCJmYWNldFZhbHVlTmFtZVwiOlwiQWVyb3NwYWNlIEVsZWN0cm9uaWNzXCIsXCJmYWNldFZhbHVlSWRcIjo0Mjk0OTY3MjQ4LFwic2VsZWN0ZWRcIjpmYWxzZX0se1wiZmFjZXRWYWx1ZU5hbWVcIjpcIk51Y2xlYXIgUG93ZXJcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNzUsXCJzZWxlY3RlZFwiOmZhbHNlfSx7XCJmYWNldFZhbHVlTmFtZVwiOlwiUG93ZXIgYW5kIEVuZXJneVwiLFwiZmFjZXRWYWx1ZUlkXCI6NDI5NDk2NzI3OSxcInNlbGVjdGVkXCI6ZmFsc2V9XSxcInNvcnRPcmRlclwiOjN9LHtcImZhY2V0SWRcIjoyLFwiZmFjZXROYW1lXCI6XCJjYXRlZ29yaWVzXCIsXCJtdWx0aXNlbGVjdFwiOnRydWUsXCJmYWNldHNcIjpbe1wiZmFjZXRWYWx1ZU5hbWVcIjpcIk5FU0NcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNTksXCJzZWxlY3RlZFwiOmZhbHNlfV0sXCJzb3J0T3JkZXJcIjo3OH1dLFwic2VhcmNoUmVzdWx0c1wiOntcInJlc3VsdHNNYXBMaXN0XCI6W3tcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIDUyOC0xOTk0IC0gSUVFRSBTdGFuZGFyZCBmb3IgSW5lcnRpYWwgU2Vuc29yIFRlcm1pbm9sb2d5XCIsXCJyZWNvcmRUZXh0XCI6XCJJRUVFIDxlbmRlY2FfdGVybT41Mjg8XC9lbmRlY2FfdGVybT4tMTk5NCAtIElFRUUgU3RhbmRhcmQgZm9yIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9zdGFuZGFyZC81MjgtMTk5NC5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSA1MjgtMTk4NCAtIElFRUUgU3RhbmRhcmQgSW5lcnRpYWwgU2Vuc29yIFRlcm1pbm9sb2d5XCIsXCJyZWNvcmRUZXh0XCI6XCJJRUVFIDxlbmRlY2FfdGVybT41Mjg8XC9lbmRlY2FfdGVybT4tMTk4NCAtIElFRUUgU3RhbmRhcmQgSW5lcnRpYWwgU2Vuc29yIFRlcm1pbm9sb2d5XCIsXCJyZWNvcmRVUkxcIjpcImh0dHBzOi8vc3RhbmRhcmRzLmllZWUub3JnL3N0YW5kYXJkLzUyOC0xOTg0Lmh0bWxcIn19LHtcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIDUyOC0yMDE5IC0gSUVFRSBTdGFuZGFyZCBmb3IgSW5lcnRpYWwgU2Vuc29yIFRlcm1pbm9sb2d5XCIsXCJyZWNvcmRUZXh0XCI6XCJJRUVFIDxlbmRlY2FfdGVybT41Mjg8XC9lbmRlY2FfdGVybT4tMjAxOSAtIElFRUUgU3RhbmRhcmQgZm9yIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9jb250ZW50L2llZWUtc3RhbmRhcmRzL2VuL3N0YW5kYXJkLzUyOC0yMDE5Lmh0bWxcIn19LHtcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIDUyOC0yMDE5IC0gSUVFRSBTdGFuZGFyZCBmb3IgSW5lcnRpYWwgU2Vuc29yIFRlcm1pbm9sb2d5XCIsXCJyZWNvcmRUZXh0XCI6XCJJRUVFIDxlbmRlY2FfdGVybT41Mjg8XC9lbmRlY2FfdGVybT4tMjAxOSAtIElFRUUgU3RhbmRhcmQgZm9yIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9zdGFuZGFyZC81MjgtMjAxOS5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSA1MjgtMjAwMSAtIElFRUUgU3RhbmRhcmQgZm9yIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVGV4dFwiOlwiSUVFRSA8ZW5kZWNhX3Rlcm0+NTI4PFwvZW5kZWNhX3Rlcm0+LTIwMDEgLSBJRUVFIFN0YW5kYXJkIGZvciBJbmVydGlhbCBTZW5zb3IgVGVybWlub2xvZ3lcIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvNTI4LTIwMDEuaHRtbFwifX0se1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIklFRUUgU0EgU2l0ZW1hcFwiLFwicmVjb3JkVGV4dFwiOlwiSUVFRSBTQSBTaXRlbWFwIElFRUUub3JnIElFRUUgWHBsb3JlIERpZ2l0YWwgTGlicmFyeSBJRUVFIFN0YW5kYXJkcyBJRUVFIFNwZWN0cnVtIE1vcmUgU2l0ZXMgZVRvb2xzwqAgIC4uLlwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9zaXRlbWFwL2luZGV4Lmh0bWxcIn19LHtcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIDMzNy0xOTcyIC0gSUVFRSBTdGFuZGFyZCBTcGVjaWZpY2F0aW9uIEZvcm1hdCBHdWlkZSBhbmQgVGVzdCBQcm9jZWR1cmUgZm9yIExpbmVhciwgU2luZ2xlLUF4aXMsIFBlbmR1bG91cywgQW5hbG9nIFRvcnF1ZSBCYWxhbmNlIEFjY2VsZXJvbWV0ZXJcIixcInJlY29yZFRleHRcIjpcIi4uLkFzaGxleSBNb3JhbiBFeGlzdGluZyBTdGFuZGFyZHMgSW5hY3RpdmUtV2l0aGRyYXduIElFRUUgPGVuZGVjYV90ZXJtPjUyODxcL2VuZGVjYV90ZXJtPi0xOTg0IC0gSUVFRSBTdGFuZGFyZCBJbmVydGlhbCBTZW5zb3IgVGVybWlub2xvZ3kgV2l0aGRyYXduLi4uXCIsXCJyZWNvcmRVUkxcIjpcImh0dHBzOi8vc3RhbmRhcmRzLmllZWUub3JnL3N0YW5kYXJkLzMzNy0xOTcyLmh0bWxcIn19LHtcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIDEyOTMtMTk5OC9Db3IgMS0yMDA4IC0gSUVFRSBTdGFuZGFyZCBTcGVjaWZpY2F0aW9uIEZvcm1hdCBHdWlkZSBhbmQgVGVzdCBQcm9jZWR1cmUgZm9yIExpbmVhcixTaW5nbGUtQXhpcywgTm9uZ3lyb3Njb3BpYyBBY2NlbGVyb21ldGVycyBDb3JyaWdlbmR1bSAxOiBDaGFuZ2VzIHRvIEFubmV4IEsgYW5kIEFubmV4IExcIixcInJlY29yZFRleHRcIjpcIklFRUUgMTI5My0xOTk4L0NvciAxLTIwMDggLSBJRUVFIFN0YW5kYXJkIFNwZWNpZmljYXRpb24gRm9ybWF0IEd1aWRlIGFuZCBUZXN0IFByb2NlZHVyZSBmb3IgTGluZWFyLFNpbmdsZS1BeGlzLCBOb25neXJvc2NvcGljICAuLi5cIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvMTI5My0xOTk4LUNvcjEtMjAwOC5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSAxMjkzLTIwMTggLSBJRUVFIFN0YW5kYXJkIFNwZWNpZmljYXRpb24gRm9ybWF0IEd1aWRlIGFuZCBUZXN0IFByb2NlZHVyZSBmb3IgTGluZWFyIFNpbmdsZS1BeGlzLCBOb25neXJvc2NvcGljIEFjY2VsZXJvbWV0ZXJzXCIsXCJyZWNvcmRUZXh0XCI6XCJJRUVFIDEyOTMtMjAxOCAtIElFRUUgU3RhbmRhcmQgU3BlY2lmaWNhdGlvbiBGb3JtYXQgR3VpZGUgYW5kIFRlc3QgUHJvY2VkdXJlIGZvciBMaW5lYXIgU2luZ2xlLUF4aXMsIE5vbmd5cm9zY29waWMgIC4uLlwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9zdGFuZGFyZC8xMjkzLTIwMTguaHRtbFwifX0se1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIklFRUUgMTQzMS0yMDA0IC0gSUVFRSBTdGFuZGFyZCBTcGVjaWZpY2F0aW9uIEZvcm1hdCBHdWlkZSBhbmQgVGVzdCBQcm9jZWR1cmUgZm9yIENvcmlvbGlzIFZpYnJhdG9yeSBHeXJvc1wiLFwicmVjb3JkVGV4dFwiOlwiSUVFRSAxNDMxLTIwMDQgLSBJRUVFIFN0YW5kYXJkIFNwZWNpZmljYXRpb24gRm9ybWF0IEd1aWRlIGFuZCBUZXN0IFByb2NlZHVyZSBmb3IgQ29yaW9saXMgVmlicmF0b3J5IEd5cm9zICAuLi5cIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvMTQzMS0yMDA0Lmh0bWxcIn19XSxcInRvdGFsTnVtYmVyT2ZSZXN1bHRzXCI6MzksXCJzdGFydFwiOjAsXCJvZmZzZXRcIjowLFwicmVjb3Jkc1BlclBhZ2VcIjoxMH19fSJ9
  recorded_at: Fri, 18 Sep 2020 07:57:55 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/528-2019.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 18 Sep 2020 07:57:56 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Fri, 18 Sep 2020 00:43:15 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15138'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd20c109ea397ce3a36d5a843bcf17173309d7124bc3309bad79b1c5e4913977900d67c1955938ad116da13262c5ac401b9bfe5ed031a139bff5961c15f2694965e6a95fc6d92e45af128a3c76ec077e39;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 18 Sep 2020 07:57:56 GMT
recorded_with: VCR 6.0.0
