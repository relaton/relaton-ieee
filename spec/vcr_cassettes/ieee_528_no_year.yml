---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%22528%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 18 Mar 2021 12:54:17 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '904'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020ddd580b9f6afdf1924b01947244b7f2fad56c5990c96522cf89fbd6c72ae7d1283b6a2e79a41bd7f1a7fcefcc8fb1fb5fce3eff2853ea1cbe5d5ca9677823cb7033864118da1c7ed1e4157e3f52256a095;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJzdGF0dXMiOiJzdWNjZXNzIiwiY29kZSI6MjAwLCJtZXNzYWdlIjoie1wicmVzcG9uc2VcIjp7XCJGYWNldHNcIjpbe1wiZmFjZXRJZFwiOjEsXCJmYWNldE5hbWVcIjpcImNvbnRlbnRUeXBlXCIsXCJtdWx0aXNlbGVjdFwiOnRydWUsXCJmYWNldHNcIjpbe1wiZmFjZXRWYWx1ZU5hbWVcIjpcIlByb2R1Y3RzXCIsXCJmYWNldFZhbHVlSWRcIjo0Mjk0OTY3MjU0LFwic2VsZWN0ZWRcIjpmYWxzZX0se1wiZmFjZXRWYWx1ZU5hbWVcIjpcIlByb2plY3RcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNTAsXCJzZWxlY3RlZFwiOmZhbHNlfSx7XCJmYWNldFZhbHVlTmFtZVwiOlwiU3RhbmRhcmRcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNDUsXCJzZWxlY3RlZFwiOmZhbHNlfV0sXCJzb3J0T3JkZXJcIjoxfSx7XCJmYWNldElkXCI6MyxcImZhY2V0TmFtZVwiOlwic3RhbmRhcmRUb3BpY3NcIixcIm11bHRpc2VsZWN0XCI6dHJ1ZSxcImZhY2V0c1wiOlt7XCJmYWNldFZhbHVlTmFtZVwiOlwiQWVyb3NwYWNlIEVsZWN0cm9uaWNzXCIsXCJmYWNldFZhbHVlSWRcIjo0Mjk0OTY3MjQ4LFwic2VsZWN0ZWRcIjpmYWxzZX0se1wiZmFjZXRWYWx1ZU5hbWVcIjpcIk51Y2xlYXIgUG93ZXJcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNzUsXCJzZWxlY3RlZFwiOmZhbHNlfSx7XCJmYWNldFZhbHVlTmFtZVwiOlwiUG93ZXIgYW5kIEVuZXJneVwiLFwiZmFjZXRWYWx1ZUlkXCI6NDI5NDk2NzI3OSxcInNlbGVjdGVkXCI6ZmFsc2V9XSxcInNvcnRPcmRlclwiOjQ0fSx7XCJmYWNldElkXCI6MixcImZhY2V0TmFtZVwiOlwiY2F0ZWdvcmllc1wiLFwibXVsdGlzZWxlY3RcIjp0cnVlLFwiZmFjZXRzXCI6W3tcImZhY2V0VmFsdWVOYW1lXCI6XCJORVNDXCIsXCJmYWNldFZhbHVlSWRcIjo0Mjk0OTY3MjU5LFwic2VsZWN0ZWRcIjpmYWxzZX1dLFwic29ydE9yZGVyXCI6NjF9XSxcInNlYXJjaFJlc3VsdHNcIjp7XCJyZXN1bHRzTWFwTGlzdFwiOlt7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSA1MjgtMTk5NCAtIElFRUUgU3RhbmRhcmQgZm9yIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVGV4dFwiOlwiSUVFRSA8ZW5kZWNhX3Rlcm0+NTI4PFwvZW5kZWNhX3Rlcm0+LTE5OTQgLSBJRUVFIFN0YW5kYXJkIGZvciBJbmVydGlhbCBTZW5zb3IgVGVybWlub2xvZ3lcIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvNTI4LTE5OTQuaHRtbFwifX0se1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIklFRUUgNTI4LTE5ODQgLSBJRUVFIFN0YW5kYXJkIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVGV4dFwiOlwiSUVFRSA8ZW5kZWNhX3Rlcm0+NTI4PFwvZW5kZWNhX3Rlcm0+LTE5ODQgLSBJRUVFIFN0YW5kYXJkIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9zdGFuZGFyZC81MjgtMTk4NC5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSA1MjgtMjAxOSAtIElFRUUgU3RhbmRhcmQgZm9yIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVGV4dFwiOlwiSUVFRSA8ZW5kZWNhX3Rlcm0+NTI4PFwvZW5kZWNhX3Rlcm0+LTIwMTkgLSBJRUVFIFN0YW5kYXJkIGZvciBJbmVydGlhbCBTZW5zb3IgVGVybWlub2xvZ3lcIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvY29udGVudC9pZWVlLXN0YW5kYXJkcy9lbi9zdGFuZGFyZC81MjgtMjAxOS5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSA1MjgtMjAxOSAtIElFRUUgU3RhbmRhcmQgZm9yIEluZXJ0aWFsIFNlbnNvciBUZXJtaW5vbG9neVwiLFwicmVjb3JkVGV4dFwiOlwiSUVFRSA8ZW5kZWNhX3Rlcm0+NTI4PFwvZW5kZWNhX3Rlcm0+LTIwMTkgLSBJRUVFIFN0YW5kYXJkIGZvciBJbmVydGlhbCBTZW5zb3IgVGVybWlub2xvZ3lcIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvNTI4LTIwMTkuaHRtbFwifX0se1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIklFRUUgNTI4LTIwMDEgLSBJRUVFIFN0YW5kYXJkIGZvciBJbmVydGlhbCBTZW5zb3IgVGVybWlub2xvZ3lcIixcInJlY29yZFRleHRcIjpcIklFRUUgPGVuZGVjYV90ZXJtPjUyODxcL2VuZGVjYV90ZXJtPi0yMDAxIC0gSUVFRSBTdGFuZGFyZCBmb3IgSW5lcnRpYWwgU2Vuc29yIFRlcm1pbm9sb2d5XCIsXCJyZWNvcmRVUkxcIjpcImh0dHBzOi8vc3RhbmRhcmRzLmllZWUub3JnL3N0YW5kYXJkLzUyOC0yMDAxLmh0bWxcIn19LHtcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIFNBIFNpdGVtYXBcIixcInJlY29yZFRleHRcIjpcIklFRUUgU0EgU2l0ZW1hcCBJRUVFLm9yZyBJRUVFIFhwbG9yZSBEaWdpdGFsIExpYnJhcnkgSUVFRSBTdGFuZGFyZHMgSUVFRSBTcGVjdHJ1bSBNb3JlIFNpdGVzIGVUb29sc8KgICAuLi5cIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc2l0ZW1hcC9pbmRleC5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSAzMzctMTk3MiAtIElFRUUgU3RhbmRhcmQgU3BlY2lmaWNhdGlvbiBGb3JtYXQgR3VpZGUgYW5kIFRlc3QgUHJvY2VkdXJlIGZvciBMaW5lYXIsIFNpbmdsZS1BeGlzLCBQZW5kdWxvdXMsIEFuYWxvZyBUb3JxdWUgQmFsYW5jZSBBY2NlbGVyb21ldGVyXCIsXCJyZWNvcmRUZXh0XCI6XCIuLi5QYXRyaWNpYSBSb2RlciBFeGlzdGluZyBTdGFuZGFyZHMgSW5hY3RpdmUtV2l0aGRyYXduIElFRUUgPGVuZGVjYV90ZXJtPjUyODxcL2VuZGVjYV90ZXJtPi0xOTg0IC0gSUVFRSBTdGFuZGFyZCBJbmVydGlhbCBTZW5zb3IgVGVybWlub2xvZ3kgV2l0aGRyYXduLi4uXCIsXCJyZWNvcmRVUkxcIjpcImh0dHBzOi8vc3RhbmRhcmRzLmllZWUub3JnL3N0YW5kYXJkLzMzNy0xOTcyLmh0bWxcIn19LHtcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIDEyOTMtMTk5OC9Db3IgMS0yMDA4IC0gSUVFRSBTdGFuZGFyZCBTcGVjaWZpY2F0aW9uIEZvcm1hdCBHdWlkZSBhbmQgVGVzdCBQcm9jZWR1cmUgZm9yIExpbmVhcixTaW5nbGUtQXhpcywgTm9uZ3lyb3Njb3BpYyBBY2NlbGVyb21ldGVycyBDb3JyaWdlbmR1bSAxOiBDaGFuZ2VzIHRvIEFubmV4IEsgYW5kIEFubmV4IExcIixcInJlY29yZFRleHRcIjpcIklFRUUgMTI5My0xOTk4L0NvciAxLTIwMDggLSBJRUVFIFN0YW5kYXJkIFNwZWNpZmljYXRpb24gRm9ybWF0IEd1aWRlIGFuZCBUZXN0IFByb2NlZHVyZSBmb3IgTGluZWFyLFNpbmdsZS1BeGlzLCBOb25neXJvc2NvcGljICAuLi5cIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvMTI5My0xOTk4LUNvcjEtMjAwOC5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSAxMjkzLTIwMTggLSBJRUVFIFN0YW5kYXJkIFNwZWNpZmljYXRpb24gRm9ybWF0IEd1aWRlIGFuZCBUZXN0IFByb2NlZHVyZSBmb3IgTGluZWFyIFNpbmdsZS1BeGlzLCBOb25neXJvc2NvcGljIEFjY2VsZXJvbWV0ZXJzXCIsXCJyZWNvcmRUZXh0XCI6XCJJRUVFIDEyOTMtMjAxOCAtIElFRUUgU3RhbmRhcmQgU3BlY2lmaWNhdGlvbiBGb3JtYXQgR3VpZGUgYW5kIFRlc3QgUHJvY2VkdXJlIGZvciBMaW5lYXIgU2luZ2xlLUF4aXMsIE5vbmd5cm9zY29waWMgIC4uLlwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9zdGFuZGFyZC8xMjkzLTIwMTguaHRtbFwifX0se1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIklFRUUgMTQzMS0yMDA0IC0gSUVFRSBTdGFuZGFyZCBTcGVjaWZpY2F0aW9uIEZvcm1hdCBHdWlkZSBhbmQgVGVzdCBQcm9jZWR1cmUgZm9yIENvcmlvbGlzIFZpYnJhdG9yeSBHeXJvc1wiLFwicmVjb3JkVGV4dFwiOlwiSUVFRSAxNDMxLTIwMDQgLSBJRUVFIFN0YW5kYXJkIFNwZWNpZmljYXRpb24gRm9ybWF0IEd1aWRlIGFuZCBUZXN0IFByb2NlZHVyZSBmb3IgQ29yaW9saXMgVmlicmF0b3J5IEd5cm9zICAuLi5cIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvMTQzMS0yMDA0Lmh0bWxcIn19XSxcInRvdGFsTnVtYmVyT2ZSZXN1bHRzXCI6NDAsXCJzdGFydFwiOjAsXCJvZmZzZXRcIjowLFwicmVjb3Jkc1BlclBhZ2VcIjoxMH19fSJ9
  recorded_at: Thu, 18 Mar 2021 12:54:18 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/528-2019.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 18 Mar 2021 12:54:18 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 18 Mar 2021 02:20:59 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher1useast1
      X-Frame-Options:
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '14957'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7FFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7FFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd2cd0014510f3d8066c8176143b4c47cd52ebf79453031ae6e120f267001a4e54e5b95e083d22c57e836cf4dc16ce4d2e603c88d543b2d7e95833b5d26ad3a94348c9a8c87f4fb71a8a074190b70999b4;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 18 Mar 2021 12:54:18 GMT
recorded_with: VCR 6.0.0
