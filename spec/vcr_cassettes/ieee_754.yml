---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%22754%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.8.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 23 Sep 2021 11:00:24 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher1useast1
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '829'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7FFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7FFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd662be942aa5f53a9b2c255b7e21a00472ae8f0cebb5f2aa49357ef7d9e2b68cbe3f8c84a6920c4c6fa9133603a6b2a8d;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: '{"status":"success","code":200,"message":"{\"response\":{\"Facets\":[{\"facetId\":1,\"facetName\":\"contentType\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Governance\",\"facetValueId\":4294967264,\"selected\":false},{\"facetValueName\":\"Standard\",\"facetValueId\":4294967245,\"selected\":false}],\"sortOrder\":1},{\"facetId\":3,\"facetName\":\"standardTopics\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Computer
        Technology\",\"facetValueId\":4294967281,\"selected\":false}],\"sortOrder\":91}],\"searchResults\":{\"resultsMapList\":[{\"record\":{\"recordTitle\":\"IEEE
        754-1985 - IEEE Standard for Binary Floating-Point Arithmetic\",\"recordText\":\"IEEE
        <endeca_term>754<\/endeca_term>-1985 - IEEE Standard for Binary Floating-Point
        Arithmetic\",\"recordURL\":\"https://standards.ieee.org/standard/754-1985.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        754-2008 - IEEE Standard for Floating-Point Arithmetic\",\"recordText\":\"IEEE
        <endeca_term>754<\/endeca_term>-2008 - IEEE Standard for Floating-Point Arithmetic\",\"recordURL\":\"https://standards.ieee.org/standard/754-2008.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        754-2019 - IEEE Standard for Floating-Point Arithmetic\",\"recordText\":\"IEEE
        <endeca_term>754<\/endeca_term>-2019 - IEEE Standard for Floating-Point Arithmetic\",\"recordURL\":\"https://standards.ieee.org/standard/754-2019.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        754-2019 - IEEE Standard for Floating-Point Arithmetic\",\"recordText\":\"IEEE
        <endeca_term>754<\/endeca_term>-2019 - IEEE Standard for Floating-Point Arithmetic\",\"recordURL\":\"https://standards.ieee.org/content/ieee-standards/en/standard/754-2019.html\"}},{\"record\":{\"recordTitle\":\"Std
        NoPatent OwnerContact for LicensePatent \\r Serial No. \\r (if \",\"recordText\":\"Std
        NoPatent OwnerContact for LicensePatent \\r Serial No. \\r (if indicated)Letter
        DateLicensing Assurance ReceivedDate record  ...\",\"recordURL\":\"https://standards.ieee.org/content/dam/ieee-standards/standards/web/governance/patcom/xls-files/ieee-802.16-802.16.1-amendments.xlsx\"}},{\"record\":{\"recordTitle\":\"Std
        \\rNo.Patent OwnerContact for LicensePatent Serial No. (if indicated)Letter
        DateLicensing \",\"recordText\":\"Std \\rNo.Patent OwnerContact for LicensePatent
        Serial No. (if indicated)Letter DateLicensing Assurance ReceivedDate record
        entered or  ...\",\"recordURL\":\"https://standards.ieee.org/content/dam/ieee-standards/standards/web/governance/patcom/xls-files/ieee-802.11-amendments.xlsx\"}},{\"record\":{\"recordTitle\":\"IEEE/ISO/IEC
        60559-2020 - ISO/IEC/IEEE International Standard - Floating-point arithmetic\",\"recordText\":\"...05-08
        Working Group Details Working Group <endeca_term>754<\/endeca_term>_WG - Working
        Group for Floating-Point Arithmetic...\",\"recordURL\":\"https://standards.ieee.org/standard/60559-2020.html\"}},{\"record\":{\"recordTitle\":\"60559
        - ISO/IEC/IEEE Draft International Standard for Floating-Point Arithmetic\",\"recordText\":\"...05-08
        Working Group Details Working Group <endeca_term>754<\/endeca_term>_WG - Working
        Group for Floating-Point Arithmetic...\",\"recordURL\":\"https://standards.ieee.org/standard/60559-0.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        854-1987 - IEEE Standard for Radix-Independent Floating-Point Arithmetic\",\"recordText\":\"...03-17
        Working Group Details Working Group <endeca_term>754<\/endeca_term>_WG - Working
        Group for Floating-Point Arithmetic...\",\"recordURL\":\"https://standards.ieee.org/standard/854-1987.html\"}},{\"record\":{\"recordTitle\":\"Std
        No.Patent OwnerContact for \\r LicensePatent \\r Serial No. \\r \",\"recordText\":\"Std
        No.Patent OwnerContact for \\r LicensePatent \\r Serial No. \\r (if \\r indicated)Letter
        DateLicensing Assurance  ...\",\"recordURL\":\"https://standards.ieee.org/content/dam/ieee-standards/standards/web/governance/patcom/xls-files/ieee-802.12-802.15.13.xlsx\"}}],\"totalNumberOfResults\":17,\"start\":0,\"offset\":0,\"recordsPerPage\":10}}}"}'
  recorded_at: Thu, 23 Sep 2021 11:00:24 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/754-2019.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.8.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 23 Sep 2021 11:00:24 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 23 Sep 2021 02:20:11 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '11923'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41098F3D56379851DC886A0366123E7C88AD28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41098F3D56379851DC886A0366123E7C88AD28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd56410fa79e91caf5aa2dc05e06bb9fcd5c09314b78b5a53c39370ec2a83c1704ead5769f299973b593511c764c6b70c4;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 23 Sep 2021 11:00:24 GMT
recorded_with: VCR 6.0.0
