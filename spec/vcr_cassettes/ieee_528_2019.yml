---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%22528-2019%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:56 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      Content-Length:
      - '846'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd89d514e92a1e35b1c5ac3adfd8c4e77a372116c40785d1e851d17dc436b1298c6ba0ab1a07864c164a943dd190c53c9d3c1c61596c3592fc44ea14e7aa72c167e4b5e384a69b4ed8081375e90fb5de6a;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: '{"status":"success","code":200,"message":"{\"response\":{\"Facets\":[{\"facetId\":1,\"facetName\":\"contentType\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Standard\",\"facetValueId\":4294967245,\"selected\":false}],\"sortOrder\":1},{\"facetId\":3,\"facetName\":\"standardTopics\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Aerospace
        Electronics\",\"facetValueId\":4294967248,\"selected\":false},{\"facetValueName\":\"Nuclear
        Power\",\"facetValueId\":4294967275,\"selected\":false},{\"facetValueName\":\"Power
        and Energy\",\"facetValueId\":4294967279,\"selected\":false}],\"sortOrder\":30}],\"searchResults\":{\"resultsMapList\":[{\"record\":{\"recordTitle\":\"528-2019
        - IEEE Standard for Inertial Sensor Terminology\",\"recordText\":\"<endeca_term>528-2019<\/endeca_term>
        - IEEE Standard for Inertial Sensor Terminology\",\"recordURL\":\"https://standards.ieee.org/content/ieee-standards/en/standard/528-2019.html\"}},{\"record\":{\"recordTitle\":\"528-2019
        - IEEE Standard for Inertial Sensor Terminology\",\"recordText\":\"<endeca_term>528-2019<\/endeca_term>
        - IEEE Standard for Inertial Sensor Terminology\",\"recordURL\":\"https://standards.ieee.org/standard/528-2019.html\"}},{\"record\":{\"recordTitle\":\"1293-1998/Cor
        1-2008 - IEEE Standard Specification Format Guide and Test Procedure for Linear,Single-Axis,
        Nongyroscopic Accelerometers Corrigendum 1: Changes to Annex K and Annex L\",\"recordText\":\"1293-1998/Cor
        1-2008 - IEEE Standard Specification Format Guide and Test Procedure for Linear,Single-Axis,
        Nongyroscopic Accelerometers  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1293-1998-Cor1-2008.html\"}},{\"record\":{\"recordTitle\":\"1293-2018
        - IEEE Standard Specification Format Guide and Test Procedure for Linear Single-Axis,
        Nongyroscopic Accelerometers\",\"recordText\":\"1293-2018 - IEEE Standard
        Specification Format Guide and Test Procedure for Linear Single-Axis, Nongyroscopic
        Accelerometers  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1293-2018.html\"}},{\"record\":{\"recordTitle\":\"1293-2018
        - IEEE Standard Specification Format Guide and Test Procedure for Linear Single-Axis,
        Nongyroscopic Accelerometers\",\"recordText\":\"1293-2018 - IEEE Standard
        Specification Format Guide and Test Procedure for Linear Single-Axis, Nongyroscopic
        Accelerometers  ...\",\"recordURL\":\"https://standards.ieee.org/content/ieee-standards/en/standard/1293-2018.html\"}},{\"record\":{\"recordTitle\":\"1431-2004
        - IEEE Standard Specification Format Guide and Test Procedure for Coriolis
        Vibratory Gyros\",\"recordText\":\"1431-2004 - IEEE Standard Specification
        Format Guide and Test Procedure for Coriolis Vibratory Gyros IEEE.org  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1431-2004.html\"}},{\"record\":{\"recordTitle\":\"1431-2004/Cor
        1-2008 - IEEE Standard Specification Format Guide and Test Procedure for Coriolis
        Vibratory Gyros - Corrigendum 1\",\"recordText\":\"1431-2004/Cor 1-2008 -
        IEEE Standard Specification Format Guide and Test Procedure for Coriolis Vibratory
        Gyros  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1431-2004-Cor1-2008.html\"}},{\"record\":{\"recordTitle\":\"1554-2005
        - IEEE Recommended Practice for Inertial Sensor Test Equipment, Instrumentation,
        Data Acquisition, and Analysis\",\"recordText\":\"1554-2005 - IEEE Recommended
        Practice for Inertial Sensor Test Equipment, Instrumentation, Data Acquisition,
        and Analysis  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1554-2005.html\"}},{\"record\":{\"recordTitle\":\"292-1969
        - IEEE Specification Format for Single-Degree-of-Freedom Spring-Restrained
        Rate Gyros\",\"recordText\":\"292-1969 - IEEE Specification Format for Single-Degree-of-Freedom
        Spring-Restrained Rate Gyros IEEE.org IEEE Xplore Digital Library  ...\",\"recordURL\":\"https://standards.ieee.org/standard/292-1969.html\"}},{\"record\":{\"recordTitle\":\"293-1969
        - IEEE Test Procedure for Single-Degree-of-Freedom Spring-Restrained Rate
        Gyros\",\"recordText\":\"293-1969 - IEEE Test Procedure for Single-Degree-of-Freedom
        Spring-Restrained Rate Gyros IEEE.org IEEE Xplore Digital Library  ...\",\"recordURL\":\"https://standards.ieee.org/standard/293-1969.html\"}}],\"totalNumberOfResults\":24,\"start\":0,\"offset\":0,\"recordsPerPage\":10}}}"}'
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:56 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/528-2019.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:57 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:28:33 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15070'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd50c6fce88bc08224fae1ab886d140bd8803d4e3316f96a2e04ee4670cdcd9af2f070afe4e4c38bce379a5a2a46d50c56cec52f81aa0f33af1c126de07ae5b265418e0a677b209b036cf158eb33d4d6f5;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:57 GMT
- request:
    method: get
    uri: https://standards.ieee.org/content/ieee-standards/en/standard/528-2019.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:57 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:28:33 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15070'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd6ee7e04a58210ca71f9b73aae17e902c3665fe25d0b8bf20548f2a1da3aeeb7d05f42d5b439798242100e4f1b28e3a0272c0df1413232bff8fd99ee57a0252741406f6a4c19af6d44976935ebbddb3f8;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:57 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/1293-1998-Cor1-2008.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:57 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:54:57 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15320'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd405024010daa39d9cb1d196a4b191c9c8877be1f6ea59f7d8919a767e6a6772ea5dd95c500a9051c72c1f307bd7bb1e93e7539ff91abadedaf26652e59288fc817b653b0170c8792152df1d93586f2e3;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:57 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/1293-2018.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:57 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:54:57 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15360'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd4eecfa8cc0463247ad297a5c4d889bf45f4208b1d640f5932a75c70bcf75d48f916f2f6098d988c7d1b5d69f7d61b0122423b80d7331d0b69f426b05e0d0dc7f9cd158a905827a7671b9af7e26e2bda3;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:57 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/1431-2004.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:57 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:54:58 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15331'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020ddc4ab8270c0d300aff34be5f1f62b917547783978ef21cca7f9f6c66ee60b9ff493715130a0cd9d3028eecf4424948eac5d73777266b7cba30e314a8934c0743bf340de181592d15c4ec4f09925f48834;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:58 GMT
- request:
    method: get
    uri: https://standards.ieee.org/content/ieee-standards/en/standard/1293-2018.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:57 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:54:58 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15360'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd7b98d89de084c9b5435369122711c5d458570535a3e5abac363d46a65e9d1f1ec17808ce4ed516494579ce278e124f89b2a25d5cafb14b0df1471a93cf15b4c992242b0e96838521c44cf8380d62235a;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:58 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/1554-2005.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:58 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:54:58 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15089'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C80C17259E173393484CB99714CB48C4AFB1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dda34e52df2e3e96ba4c34601e069a00bed733d0a73b48843193ec9397490fac5766e841cad39ae696e80867d6eda84e84e2ebfb5e8bb96b3d43fe06b8cdc7be13410069cecba8dc68bbd5114cb1342662;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:58 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/1431-2004-Cor1-2008.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:58 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:54:58 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '14888'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd39e9af5cdbd995e311a74b7472fdff7cc061de2c3a49722242fd1e1c09e692a78416ccd4cd2ea01e9aa888b79dd5e4583c354e8d7bcb045b22be0a44a16537841fdea62e6ef9dafa882f125f2967f352;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:58 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/292-1969.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:58 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:54:59 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15101'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B9880327CD00AA10264F99D0D6415BDE660FA7517AD997168A1D36AA47EF7D2A;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd845624a76297e27a6ecc962cd2aeec2e15bf9bb34c174e7066140db71dca911e59ca8f219ec7091a1307ca783733056a82598af00517162b60484b5b8f4113441ddb71c1f58046d8d2dd824aa0fc3852;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:59 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/293-1969.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 28 May 2020 14:54:58 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 28 May 2020 14:54:59 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '15119'
      Set-Cookie:
      - AWSELB=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;Secure
      - AWSELBCORS=77AF5BDD1C1D50E4D12118E21FBA1C1FB04C8B23C8B85BCDE140D80C879EB3BF8FCE853543B1A0E49404A8F888F3C7BA1947A3C581C9FE6BA7CF201DC5898AAC0539E8F22B;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd786d20caab70fa2594ed1d87f644c3dea5d7dd60b1703976f01ee8e323b1f0b6c3048b0bbc958e3433d09735acd31df32b23e1566f37f958ffecfe102c4fba1e7b9fe45ebe65225cc7996ba81d825c99;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 28 May 2020 14:54:59 GMT
recorded_with: VCR 5.1.0
