---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%221619-2007%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.7.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 26 Aug 2021 10:02:11 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '924'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd8a15309cddfb901621101d26261f6f45c7c3fb3a1c3634d27593786532c4b8d5cc5d96514939b888c37c48ecbbaada70;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJzdGF0dXMiOiJzdWNjZXNzIiwiY29kZSI6MjAwLCJtZXNzYWdlIjoie1wicmVzcG9uc2VcIjp7XCJGYWNldHNcIjpbe1wiZmFjZXRJZFwiOjEsXCJmYWNldE5hbWVcIjpcImNvbnRlbnRUeXBlXCIsXCJtdWx0aXNlbGVjdFwiOnRydWUsXCJmYWNldHNcIjpbe1wiZmFjZXRWYWx1ZU5hbWVcIjpcIlByb2plY3RcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNTAsXCJzZWxlY3RlZFwiOmZhbHNlfSx7XCJmYWNldFZhbHVlTmFtZVwiOlwiU3RhbmRhcmRcIixcImZhY2V0VmFsdWVJZFwiOjQyOTQ5NjcyNDUsXCJzZWxlY3RlZFwiOmZhbHNlfV0sXCJzb3J0T3JkZXJcIjoxfSx7XCJmYWNldElkXCI6MyxcImZhY2V0TmFtZVwiOlwic3RhbmRhcmRUb3BpY3NcIixcIm11bHRpc2VsZWN0XCI6dHJ1ZSxcImZhY2V0c1wiOlt7XCJmYWNldFZhbHVlTmFtZVwiOlwiQ29tcHV0ZXIgVGVjaG5vbG9neVwiLFwiZmFjZXRWYWx1ZUlkXCI6NDI5NDk2NzI4MSxcInNlbGVjdGVkXCI6ZmFsc2V9LHtcImZhY2V0VmFsdWVOYW1lXCI6XCJDb25zdW1lciBFbGVjdHJvbmljc1wiLFwiZmFjZXRWYWx1ZUlkXCI6NDI5NDk2NzI0MCxcInNlbGVjdGVkXCI6ZmFsc2V9XSxcInNvcnRPcmRlclwiOjUzfV0sXCJzZWFyY2hSZXN1bHRzXCI6e1wicmVzdWx0c01hcExpc3RcIjpbe1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIklFRUUgMTYxOS0yMDA3IC0gSUVFRSBTdGFuZGFyZCBmb3IgQ3J5cHRvZ3JhcGhpYyBQcm90ZWN0aW9uIG9mIERhdGEgb24gQmxvY2stT3JpZW50ZWQgU3RvcmFnZSBEZXZpY2VzXCIsXCJyZWNvcmRUZXh0XCI6XCJJRUVFIDxlbmRlY2FfdGVybT4xNjE5LTIwMDc8XC9lbmRlY2FfdGVybT4gLSBJRUVFIFN0YW5kYXJkIGZvciBDcnlwdG9ncmFwaGljIFByb3RlY3Rpb24gb2YgRGF0YSBvbiBCbG9jay1PcmllbnRlZCBTdG9yYWdlIERldmljZXNcIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvMTYxOS0yMDA3Lmh0bWxcIn19LHtcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIDEyNDQuMi0yMDAwIC0gSUVFRSBTdGFuZGFyZCBmb3IgTWVkaWEgTWFuYWdlbWVudCBTeXN0ZW0gKE1NUykgU2Vzc2lvbiBTZWN1cml0eSwgQXV0aGVudGljYXRpb24sIEluaXRpYWxpemF0aW9uIFByb3RvY29sIChTU0FJUClcIixcInJlY29yZFRleHRcIjpcIi4uLmdyYW51bGFyaXR5IG9mIGEgcG90ZW50aWFsIGF0dGFjay4gU3VwZXJzZWRlZCA8ZW5kZWNhX3Rlcm0+MTYxOS0yMDA3PFwvZW5kZWNhX3Rlcm0+IC0gSUVFRSBTdGFuZGFyZCBmb3IgQ3J5cHRvZ3JhcGhpYyBQcm90ZWN0aW9uIG9mIERhdGEuLi5cIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvMTI0NF8yLTIwMDAuaHRtbFwifX0se1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIklFRUUgMTYxOS0yMDE4IC0gSUVFRSBTdGFuZGFyZCBmb3IgQ3J5cHRvZ3JhcGhpYyBQcm90ZWN0aW9uIG9mIERhdGEgb24gQmxvY2stT3JpZW50ZWQgU3RvcmFnZSBEZXZpY2VzXCIsXCJyZWNvcmRUZXh0XCI6XCIuLi5vZiBhIHBvdGVudGlhbCBhdHRhY2suIFN1cGVyc2VkZWQgSUVFRSA8ZW5kZWNhX3Rlcm0+MTYxOS0yMDA3PFwvZW5kZWNhX3Rlcm0+IC0gSUVFRSBTdGFuZGFyZCBmb3IgQ3J5cHRvZ3JhcGhpYyBQcm90ZWN0aW9uIG9mIERhdGEuLi5cIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvMTYxOS0yMDE4Lmh0bWxcIn19LHtcInJlY29yZFwiOntcInJlY29yZFRpdGxlXCI6XCJJRUVFIDE2MTkuMS0yMDA3IC0gSUVFRSBTdGFuZGFyZCBmb3IgQXV0aGVudGljYXRlZCBFbmNyeXB0aW9uIHdpdGggTGVuZ3RoIEV4cGFuc2lvbiBmb3IgU3RvcmFnZSBEZXZpY2VzXCIsXCJyZWNvcmRUZXh0XCI6XCIuLi5vZiBhIHBvdGVudGlhbCBhdHRhY2suIFN1cGVyc2VkZWQgSUVFRSA8ZW5kZWNhX3Rlcm0+MTYxOS0yMDA3PFwvZW5kZWNhX3Rlcm0+IC0gSUVFRSBTdGFuZGFyZCBmb3IgQ3J5cHRvZ3JhcGhpYyBQcm90ZWN0aW9uIG9mIERhdGEuLi5cIixcInJlY29yZFVSTFwiOlwiaHR0cHM6Ly9zdGFuZGFyZHMuaWVlZS5vcmcvc3RhbmRhcmQvMTYxOV8xLTIwMDcuaHRtbFwifX0se1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIklFRUUgMTYxOS4xLTIwMTggLSBJRUVFIFN0YW5kYXJkIGZvciBBdXRoZW50aWNhdGVkIEVuY3J5cHRpb24gd2l0aCBMZW5ndGggRXhwYW5zaW9uIGZvciBTdG9yYWdlIERldmljZXNcIixcInJlY29yZFRleHRcIjpcIi4uLm9mIGEgcG90ZW50aWFsIGF0dGFjay4gU3VwZXJzZWRlZCBJRUVFIDxlbmRlY2FfdGVybT4xNjE5LTIwMDc8XC9lbmRlY2FfdGVybT4gLSBJRUVFIFN0YW5kYXJkIGZvciBDcnlwdG9ncmFwaGljIFByb3RlY3Rpb24gb2YgRGF0YS4uLlwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9zdGFuZGFyZC8xNjE5XzEtMjAxOC5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSAxNjE5LjItMjAxMCAtIElFRUUgU3RhbmRhcmQgZm9yIFdpZGUtQmxvY2sgRW5jcnlwdGlvbiBmb3IgU2hhcmVkIFN0b3JhZ2UgTWVkaWFcIixcInJlY29yZFRleHRcIjpcIi4uLlRvbSBUaG9tcHNvbiBFeGlzdGluZyBTdGFuZGFyZHMgU3VwZXJzZWRlZCBJRUVFIDxlbmRlY2FfdGVybT4xNjE5LTIwMDc8XC9lbmRlY2FfdGVybT4gLSBJRUVFIFN0YW5kYXJkIGZvciBDcnlwdG9ncmFwaGljIFByb3RlY3Rpb24gb2YgRGF0YS4uLlwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9zdGFuZGFyZC8xNjE5XzItMjAxMC5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiSUVFRSBTQSBTaXRlbWFwXCIsXCJyZWNvcmRUZXh0XCI6XCJJRUVFIFNBIFNpdGVtYXAgSUVFRS5vcmcgSUVFRSBYcGxvcmUgRGlnaXRhbCBMaWJyYXJ5IElFRUUgU3RhbmRhcmRzIElFRUUgU3BlY3RydW0gTW9yZSBTaXRlcyBlVG9vbHPCoCAgLi4uXCIsXCJyZWNvcmRVUkxcIjpcImh0dHBzOi8vc3RhbmRhcmRzLmllZWUub3JnL3NpdGVtYXAvaW5kZXguaHRtbFwifX0se1wicmVjb3JkXCI6e1wicmVjb3JkVGl0bGVcIjpcIlAyODgzIC0gU3RhbmRhcmQgZm9yIFNhbml0aXppbmcgU3RvcmFnZVwiLFwicmVjb3JkVGV4dFwiOlwiLi4ub2YgYSBwb3RlbnRpYWwgYXR0YWNrLiBTdXBlcnNlZGVkIElFRUUgPGVuZGVjYV90ZXJtPjE2MTktMjAwNzxcL2VuZGVjYV90ZXJtPiAtIElFRUUgU3RhbmRhcmQgZm9yIENyeXB0b2dyYXBoaWMgUHJvdGVjdGlvbiBvZiBEYXRhLi4uXCIsXCJyZWNvcmRVUkxcIjpcImh0dHBzOi8vc3RhbmRhcmRzLmllZWUub3JnL3Byb2plY3QvMjg4My5odG1sXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiICAgICBzdGFuZGFyZHMuaWVlZS5vcmcgMSAgVGhpcyBkb2N1bWVudCBcIixcInJlY29yZFRleHRcIjpcIiAgICAgc3RhbmRhcmRzLmllZWUub3JnIDEgIFRoaXMgZG9jdW1lbnQgY29udGFpbnMgc3VwcGxlbWVudGFsIGluZm9ybWF0aW9uIHJlZmVyZW5jZWQgYnkgIC4uLlwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9jb250ZW50L2RhbS9pZWVlLXN0YW5kYXJkcy9zdGFuZGFyZHMvd2ViL2RvY3VtZW50cy9vdGhlci9uaXMucGRmXCJ9fSx7XCJyZWNvcmRcIjp7XCJyZWNvcmRUaXRsZVwiOlwiICAgICBzdGFuZGFyZHMuaWVlZS5vcmcgMSAgVGhpcyBkb2N1bWVudCBcIixcInJlY29yZFRleHRcIjpcIiAgICAgc3RhbmRhcmRzLmllZWUub3JnIDEgIFRoaXMgZG9jdW1lbnQgY29udGFpbnMgc3VwcGxlbWVudGFsIGluZm9ybWF0aW9uIHJlZmVyZW5jZWQgYnkgIC4uLlwiLFwicmVjb3JkVVJMXCI6XCJodHRwczovL3N0YW5kYXJkcy5pZWVlLm9yZy9jb250ZW50L2RhbS9pZWVlLXN0YW5kYXJkcy9zdGFuZGFyZHMvd2ViL2RvY3VtZW50cy9vdGhlci9zbWFydGNpdGllcy5wZGZcIn19XSxcInRvdGFsTnVtYmVyT2ZSZXN1bHRzXCI6MTAsXCJzdGFydFwiOjAsXCJvZmZzZXRcIjowLFwicmVjb3Jkc1BlclBhZ2VcIjoxMH19fSJ9
  recorded_at: Thu, 26 Aug 2021 10:02:11 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/1619-2007.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.7.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 26 Aug 2021 10:02:12 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 26 Aug 2021 04:57:01 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher1useast1
      X-Frame-Options:
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '12030'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41098F3D56379851DC886A0366123E7C88ADFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41098F3D56379851DC886A0366123E7C88ADFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd3f4d39625ed565f3c82b460cc5f4ab87096df01107a571f7240c920d438a26ee173958cd5b204d17184aaeea0c5c34a8;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 26 Aug 2021 10:02:12 GMT
recorded_with: VCR 6.0.0
