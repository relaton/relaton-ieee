---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%22802.1AE-2018/Cor%201-2020%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.7.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 26 Aug 2021 10:02:09 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '842'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41098F3D56379851DC886A0366123E7C88AD28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41098F3D56379851DC886A0366123E7C88AD28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020ddddea52777cfc3dcdd333e283429ea7d80d5684b40ad86e827e7ab82d45660064f34de8c95a1706680ee9227c6865db94;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: '{"status":"success","code":200,"message":"{\"response\":{\"Facets\":[{\"facetId\":1,\"facetName\":\"contentType\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Project\",\"facetValueId\":4294967250,\"selected\":false},{\"facetValueName\":\"Standard\",\"facetValueId\":4294967245,\"selected\":false}],\"sortOrder\":1},{\"facetId\":3,\"facetName\":\"standardTopics\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Communications\",\"facetValueId\":4294967274,\"selected\":false},{\"facetValueName\":\"Computer
        Technology\",\"facetValueId\":4294967281,\"selected\":false},{\"facetValueName\":\"Power
        and Energy\",\"facetValueId\":4294967279,\"selected\":false},{\"facetValueName\":\"Smart
        Grid\",\"facetValueId\":4294967267,\"selected\":false},{\"facetValueName\":\"Wired
        and Wireless Communications\",\"facetValueId\":4294967268,\"selected\":false}],\"sortOrder\":11}],\"searchResults\":{\"resultsMapList\":[{\"record\":{\"recordTitle\":\"IEEE
        802.1AE-2018/Cor 1-2020 - IEEE Standard for Local and metropolitan area networks--Media
        Access Control (MAC) Security Corrigendum 1: Tag Control Information Figure\",\"recordText\":\"IEEE
        <endeca_term>802.1AE-2018/Cor<\/endeca_term> <endeca_term>1-2020<\/endeca_term>
        - IEEE Standard for Local and metropolitan area networks...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AE-2018-Cor1-2020.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802-2001 - IEEE Standard for Local and Metropolitan Area Networks: Overview
        and Architecture\",\"recordText\":\"IEEE 802-2001 - IEEE Standard for Local
        and Metropolitan Area Networks: Overview and Architecture IEEE.org  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802-2001.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802-2014 - IEEE Standard for Local and Metropolitan Area Networks: Overview
        and Architecture\",\"recordText\":\"IEEE 802-2014 - IEEE Standard for Local
        and Metropolitan Area Networks: Overview and Architecture IEEE.org  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802-2014.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2005 - IEEE Standard for Local and metropolitan area networks -- Station
        and Media Access Control Connectivity Discovery\",\"recordText\":\"IEEE 802.1AB-2005
        - IEEE Standard for Local and metropolitan area networks -- Station and Media  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2005.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2009 - IEEE Standard for Local and Metropolitan Area Networks-- Station
        and Media Access Control Connectivity Discovery\",\"recordText\":\"IEEE 802.1AB-2009
        - IEEE Standard for Local and Metropolitan Area Networks-- Station and Media
        Access  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2009.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2009/Cor 1-2013 - IEEE Standard for Local and metropolitan area networks--Station
        and Media Access Control Connectivity Discovery Corrigendum 1: Technical and
        Editorial Corrections\",\"recordText\":\"IEEE 802.1AB-2009/Cor 1-2013 - IEEE
        Standard for Local and metropolitan area networks--Station and Media Access  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2009-Cor1-2013.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2009/Cor 2-2015 - IEEE Standard for Local and metropolitan area networks--
        Station and Media Access Control Connectivity Discovery Corrigendum 2: Technical
        and Editorial Corrections\",\"recordText\":\"IEEE 802.1AB-2009/Cor 2-2015
        - IEEE Standard for Local and metropolitan area networks-- Station and Media  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2009-Cor2-2015.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2016 - IEEE Standard for Local and metropolitan area networks - Station
        and Media Access Control Connectivity Discovery\",\"recordText\":\"IEEE 802.1AB-2016
        - IEEE Standard for Local and metropolitan area networks - Station and Media  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2016.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AC-2012 - IEEE Standard for Local and metropolitan area networks-Media
        Access Control (MAC) Service Definition\",\"recordText\":\"IEEE 802.1AC-2012
        - IEEE Standard for Local and metropolitan area networks-Media Access Control
        (MAC) Service  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AC-2012.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AC-2016 - IEEE Standard for Local and metropolitan area networks -- Media
        Access Control (MAC) Service Definition\",\"recordText\":\"IEEE 802.1AC-2016
        - IEEE Standard for Local and metropolitan area networks -- Media Access Control  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AC-2016.html\"}}],\"totalNumberOfResults\":122,\"start\":0,\"offset\":0,\"recordsPerPage\":10}}}"}'
  recorded_at: Thu, 26 Aug 2021 10:02:09 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/802_1AE-2018-Cor1-2020.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.7.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 26 Aug 2021 10:02:09 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Thu, 26 Aug 2021 02:46:55 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '27455'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd6926482d201b2f137cc8747cc62db7770571dbd76fb4cef2655cd7d19e8e28e68c0ec089957be39d7eeffc2c4079d303;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 26 Aug 2021 10:02:10 GMT
recorded_with: VCR 6.0.0
