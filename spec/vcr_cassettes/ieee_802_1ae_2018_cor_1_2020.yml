---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%22802.1AE-2018/Cor%201-2020%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.4.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 14 May 2021 15:56:16 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '843'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020ddaeab7b43a22ecc55de3550180d4b9c78d0f5a72f771efb5883a65bc425315f2e8cc5d7311b8cda0a9649b0627b613561;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: '{"status":"success","code":200,"message":"{\"response\":{\"Facets\":[{\"facetId\":1,\"facetName\":\"contentType\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Project\",\"facetValueId\":4294967250,\"selected\":false},{\"facetValueName\":\"Standard\",\"facetValueId\":4294967245,\"selected\":false}],\"sortOrder\":1},{\"facetId\":3,\"facetName\":\"standardTopics\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Communications\",\"facetValueId\":4294967274,\"selected\":false},{\"facetValueName\":\"Computer
        Technology\",\"facetValueId\":4294967281,\"selected\":false},{\"facetValueName\":\"Power
        and Energy\",\"facetValueId\":4294967279,\"selected\":false},{\"facetValueName\":\"Smart
        Grid\",\"facetValueId\":4294967267,\"selected\":false},{\"facetValueName\":\"Wired
        and Wireless Communications\",\"facetValueId\":4294967268,\"selected\":false}],\"sortOrder\":73}],\"searchResults\":{\"resultsMapList\":[{\"record\":{\"recordTitle\":\"IEEE
        802.1AE-2018/Cor 1-2020 - IEEE Standard for Local and metropolitan area networks--Media
        Access Control (MAC) Security Corrigendum 1: Tag Control Information Figure\",\"recordText\":\"IEEE
        <endeca_term>802.1AE-2018/Cor<\/endeca_term> <endeca_term>1-2020<\/endeca_term>
        - IEEE Standard for Local and metropolitan area networks...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AE-2018-Cor1-2020.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802-2001 - IEEE Standard for Local and Metropolitan Area Networks: Overview
        and Architecture\",\"recordText\":\"IEEE 802-2001 - IEEE Standard for Local
        and Metropolitan Area Networks: Overview and Architecture IEEE.org  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802-2001.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802-2014 - IEEE Standard for Local and Metropolitan Area Networks: Overview
        and Architecture\",\"recordText\":\"IEEE 802-2014 - IEEE Standard for Local
        and Metropolitan Area Networks: Overview and Architecture IEEE.org  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802-2014.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2005 - IEEE Standard for Local and metropolitan area networks -- Station
        and Media Access Control Connectivity Discovery\",\"recordText\":\"IEEE 802.1AB-2005
        - IEEE Standard for Local and metropolitan area networks -- Station and Media  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2005.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2009 - IEEE Standard for Local and Metropolitan Area Networks-- Station
        and Media Access Control Connectivity Discovery\",\"recordText\":\"IEEE 802.1AB-2009
        - IEEE Standard for Local and Metropolitan Area Networks-- Station and Media
        Access  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2009.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2009/Cor 1-2013 - IEEE Standard for Local and metropolitan area networks--Station
        and Media Access Control Connectivity Discovery Corrigendum 1: Technical and
        Editorial Corrections\",\"recordText\":\"IEEE 802.1AB-2009/Cor 1-2013 - IEEE
        Standard for Local and metropolitan area networks--Station and Media Access  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2009-Cor1-2013.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2009/Cor 2-2015 - IEEE Standard for Local and metropolitan area networks--
        Station and Media Access Control Connectivity Discovery Corrigendum 2: Technical
        and Editorial Corrections\",\"recordText\":\"IEEE 802.1AB-2009/Cor 2-2015
        - IEEE Standard for Local and metropolitan area networks-- Station and Media  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2009-Cor2-2015.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2016 - IEEE Standard for Local and metropolitan area networks - Station
        and Media Access Control Connectivity Discovery\",\"recordText\":\"IEEE 802.1AB-2016
        - IEEE Standard for Local and metropolitan area networks - Station and Media  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2016.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AC-2012 - IEEE Standard for Local and metropolitan area networks-Media
        Access Control (MAC) Service Definition\",\"recordText\":\"IEEE 802.1AC-2012
        - IEEE Standard for Local and metropolitan area networks-Media Access Control
        (MAC) Service  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AC-2012.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AC-2016 - IEEE Standard for Local and metropolitan area networks -- Media
        Access Control (MAC) Service Definition\",\"recordText\":\"IEEE 802.1AC-2016
        - IEEE Standard for Local and metropolitan area networks -- Media Access Control  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AC-2016.html\"}}],\"totalNumberOfResults\":121,\"start\":0,\"offset\":0,\"recordsPerPage\":10}}}"}'
  recorded_at: Fri, 14 May 2021 15:56:16 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/802_1AE-2018-Cor1-2020.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.4.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 14 May 2021 15:56:17 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Fri, 14 May 2021 15:56:17 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '27243'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd29bb685fc0581d0a05f62b260365245ce257da80758f6518debf7fa1057ea3c5a53b337857c388d3eb535d04ff7ff6ad;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 14 May 2021 15:56:17 GMT
recorded_with: VCR 6.0.0
