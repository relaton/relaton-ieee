---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%22802.1AE-2018/Cor%201-2020%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.8.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 13 Oct 2021 15:55:00 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '986'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41098F3D56379851DC886A0366123E7C88AD28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41098F3D56379851DC886A0366123E7C88AD28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dd03dbccf52e5a40bdbbb4b67cb8ab11914b3fcf9bb9c467c8b615adac3d7092ada9b6868977f6aceed44635e652e5919a;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: '{"status":"success","code":200,"message":"{\"response\":{\"Facets\":[{\"facetId\":1,\"facetName\":\"contentType\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Project\",\"facetValueId\":4294967250,\"selected\":false},{\"facetValueName\":\"Standard\",\"facetValueId\":4294967245,\"selected\":false}],\"sortOrder\":1},{\"facetId\":3,\"facetName\":\"standardTopics\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Communications\",\"facetValueId\":4294967274,\"selected\":false},{\"facetValueName\":\"Computer
        Technology\",\"facetValueId\":4294967281,\"selected\":false},{\"facetValueName\":\"Power
        and Energy\",\"facetValueId\":4294967279,\"selected\":false},{\"facetValueName\":\"Smart
        Grid\",\"facetValueId\":4294967267,\"selected\":false},{\"facetValueName\":\"Wired
        and Wireless Communications\",\"facetValueId\":4294967268,\"selected\":false}],\"sortOrder\":13}],\"searchResults\":{\"resultsMapList\":[{\"record\":{\"recordTitle\":\"IEEE
        802.1AE-2018/Cor 1-2020 - IEEE Standard for Local and metropolitan area networks--Media
        Access Control (MAC) Security Corrigendum 1: Tag Control Information Figure\",\"recordText\":\"IEEE
        <endeca_term>802.1AE-2018/Cor<\/endeca_term> <endeca_term>1-2020<\/endeca_term>
        - IEEE Standard for Local and metropolitan area networks...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AE-2018-Cor1-2020.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802-2001 - IEEE Standard for Local and Metropolitan Area Networks: Overview
        and Architecture\",\"recordText\":\"IEEE 802-2001 - IEEE Standard for Local
        and Metropolitan Area Networks: Overview and Architecture IEEE.org  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802-2001.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2005 - IEEE Standard for Local and metropolitan area networks -- Station
        and Media Access Control Connectivity Discovery\",\"recordText\":\"IEEE 802.1AB-2005
        - IEEE Standard for Local and metropolitan area networks -- Station and Media  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2005.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AB-2009 - IEEE Standard for Local and Metropolitan Area Networks-- Station
        and Media Access Control Connectivity Discovery\",\"recordText\":\"IEEE 802.1AB-2009
        - IEEE Standard for Local and Metropolitan Area Networks-- Station and Media
        Access  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AB-2009.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AC-2016/Cor 1-2018 - IEEE Standard for Local and Metropolitan Area Networks--Media
        Access Control (MAC) Service Definition - Corrigendum 1: Logical Link Control
        (LLC) Encapsulation EtherType\",\"recordText\":\"IEEE 802.1AC-2016/Cor 1-2018
        - IEEE Standard for Local and Metropolitan Area Networks--Media Access Control
        (MAC)  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AC-2016-Cor1-2018.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1ad-2005 - IEEE Standard for Local and Metropolitan Area Networks---Virtual
        Bridged Local Area Networks---Amendment 4: Provider Bridges\",\"recordText\":\"IEEE
        802.1ad-2005 - IEEE Standard for Local and Metropolitan Area Networks---Virtual
        Bridged Local Area Networks---Amendment  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1ad-2005.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1AE-2018 - IEEE Standard for Local and metropolitan area networks-Media
        Access Control (MAC) Security\",\"recordText\":\"...Committee Status Active
        Corrigendum <endeca_term>802.1AE-2018/Cor<\/endeca_term> <endeca_term>1-2020<\/endeca_term>
        Board Approval 2018-09-27...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1AE-2018.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1ag-2007 - IEEE Standard for Local and Metropolitan Area Networks Virtual
        Bridged Local Area Networks Amendment 5: Connectivity Fault Management\",\"recordText\":\"IEEE
        802.1ag-2007 - IEEE Standard for Local and Metropolitan Area Networks Virtual
        Bridged Local Area  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1ag-2007.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1ah-2008 - IEEE Standard for Local and metropolitan area networks -- Virtual
        Bridged Local Area Networks Amendment 7: Provider Backbone Bridges\",\"recordText\":\"IEEE
        802.1ah-2008 - IEEE Standard for Local and metropolitan area networks -- Virtual
        Bridged Local  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1ah-2008.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        802.1aj-2009 - IEEE Standard for Local and Metropolitan Area Networks--Virtual
        Bridged Local Area Networks Amendment 11: Two-Port Media Access Control (Mac)
        Relay\",\"recordText\":\"IEEE 802.1aj-2009 - IEEE Standard for Local and Metropolitan
        Area Networks--Virtual Bridged Local Area Networks  ...\",\"recordURL\":\"https://standards.ieee.org/standard/802_1aj-2009.html\"}}],\"totalNumberOfResults\":88,\"start\":0,\"offset\":0,\"recordsPerPage\":10}}}"}'
  recorded_at: Wed, 13 Oct 2021 15:55:00 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/802_1AE-2018-Cor1-2020.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.8.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 13 Oct 2021 15:55:01 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Wed, 13 Oct 2021 15:55:01 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher2useast1
      X-Frame-Options:
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '27235'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7F28D0BDD8F37BC44BF6E11D27425ADCEBBBACE6A1B563AE88175AB23C96A9E2BA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dda0337a4132bd901dca490b4fe906cc3049e29f6adabf7820e8e34bc209587bf174c3a879bee7b95651ee1e2dfceea834;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 13 Oct 2021 15:55:01 GMT
recorded_with: VCR 6.0.0
